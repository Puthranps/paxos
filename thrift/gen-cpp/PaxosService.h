/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PaxosService_H
#define PaxosService_H

#include <thrift/TDispatchProcessor.h>
#include "Paxos_types.h"



class PaxosServiceIf {
 public:
  virtual ~PaxosServiceIf() {}
  virtual void propose(PaxosProposeResult& _return, const PaxosProposeArgs& pArgs) = 0;
  virtual void accept(PaxosAcceptResult& _return, const PaxosAcceptArgs& aArgs) = 0;
};

class PaxosServiceIfFactory {
 public:
  typedef PaxosServiceIf Handler;

  virtual ~PaxosServiceIfFactory() {}

  virtual PaxosServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PaxosServiceIf* /* handler */) = 0;
};

class PaxosServiceIfSingletonFactory : virtual public PaxosServiceIfFactory {
 public:
  PaxosServiceIfSingletonFactory(const boost::shared_ptr<PaxosServiceIf>& iface) : iface_(iface) {}
  virtual ~PaxosServiceIfSingletonFactory() {}

  virtual PaxosServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PaxosServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PaxosServiceIf> iface_;
};

class PaxosServiceNull : virtual public PaxosServiceIf {
 public:
  virtual ~PaxosServiceNull() {}
  void propose(PaxosProposeResult& /* _return */, const PaxosProposeArgs& /* pArgs */) {
    return;
  }
  void accept(PaxosAcceptResult& /* _return */, const PaxosAcceptArgs& /* aArgs */) {
    return;
  }
};

typedef struct _PaxosService_propose_args__isset {
  _PaxosService_propose_args__isset() : pArgs(false) {}
  bool pArgs;
} _PaxosService_propose_args__isset;

class PaxosService_propose_args {
 public:

  PaxosService_propose_args() {
  }

  virtual ~PaxosService_propose_args() throw() {}

  PaxosProposeArgs pArgs;

  _PaxosService_propose_args__isset __isset;

  void __set_pArgs(const PaxosProposeArgs& val) {
    pArgs = val;
  }

  bool operator == (const PaxosService_propose_args & rhs) const
  {
    if (!(pArgs == rhs.pArgs))
      return false;
    return true;
  }
  bool operator != (const PaxosService_propose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaxosService_propose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PaxosService_propose_pargs {
 public:


  virtual ~PaxosService_propose_pargs() throw() {}

  const PaxosProposeArgs* pArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PaxosService_propose_result__isset {
  _PaxosService_propose_result__isset() : success(false) {}
  bool success;
} _PaxosService_propose_result__isset;

class PaxosService_propose_result {
 public:

  PaxosService_propose_result() {
  }

  virtual ~PaxosService_propose_result() throw() {}

  PaxosProposeResult success;

  _PaxosService_propose_result__isset __isset;

  void __set_success(const PaxosProposeResult& val) {
    success = val;
  }

  bool operator == (const PaxosService_propose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PaxosService_propose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaxosService_propose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PaxosService_propose_presult__isset {
  _PaxosService_propose_presult__isset() : success(false) {}
  bool success;
} _PaxosService_propose_presult__isset;

class PaxosService_propose_presult {
 public:


  virtual ~PaxosService_propose_presult() throw() {}

  PaxosProposeResult* success;

  _PaxosService_propose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PaxosService_accept_args__isset {
  _PaxosService_accept_args__isset() : aArgs(false) {}
  bool aArgs;
} _PaxosService_accept_args__isset;

class PaxosService_accept_args {
 public:

  PaxosService_accept_args() {
  }

  virtual ~PaxosService_accept_args() throw() {}

  PaxosAcceptArgs aArgs;

  _PaxosService_accept_args__isset __isset;

  void __set_aArgs(const PaxosAcceptArgs& val) {
    aArgs = val;
  }

  bool operator == (const PaxosService_accept_args & rhs) const
  {
    if (!(aArgs == rhs.aArgs))
      return false;
    return true;
  }
  bool operator != (const PaxosService_accept_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaxosService_accept_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PaxosService_accept_pargs {
 public:


  virtual ~PaxosService_accept_pargs() throw() {}

  const PaxosAcceptArgs* aArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PaxosService_accept_result__isset {
  _PaxosService_accept_result__isset() : success(false) {}
  bool success;
} _PaxosService_accept_result__isset;

class PaxosService_accept_result {
 public:

  PaxosService_accept_result() {
  }

  virtual ~PaxosService_accept_result() throw() {}

  PaxosAcceptResult success;

  _PaxosService_accept_result__isset __isset;

  void __set_success(const PaxosAcceptResult& val) {
    success = val;
  }

  bool operator == (const PaxosService_accept_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PaxosService_accept_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaxosService_accept_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PaxosService_accept_presult__isset {
  _PaxosService_accept_presult__isset() : success(false) {}
  bool success;
} _PaxosService_accept_presult__isset;

class PaxosService_accept_presult {
 public:


  virtual ~PaxosService_accept_presult() throw() {}

  PaxosAcceptResult* success;

  _PaxosService_accept_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PaxosServiceClient : virtual public PaxosServiceIf {
 public:
  PaxosServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PaxosServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void propose(PaxosProposeResult& _return, const PaxosProposeArgs& pArgs);
  void send_propose(const PaxosProposeArgs& pArgs);
  void recv_propose(PaxosProposeResult& _return);
  void accept(PaxosAcceptResult& _return, const PaxosAcceptArgs& aArgs);
  void send_accept(const PaxosAcceptArgs& aArgs);
  void recv_accept(PaxosAcceptResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PaxosServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PaxosServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PaxosServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_propose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_accept(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PaxosServiceProcessor(boost::shared_ptr<PaxosServiceIf> iface) :
    iface_(iface) {
    processMap_["propose"] = &PaxosServiceProcessor::process_propose;
    processMap_["accept"] = &PaxosServiceProcessor::process_accept;
  }

  virtual ~PaxosServiceProcessor() {}
};

class PaxosServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PaxosServiceProcessorFactory(const ::boost::shared_ptr< PaxosServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PaxosServiceIfFactory > handlerFactory_;
};

class PaxosServiceMultiface : virtual public PaxosServiceIf {
 public:
  PaxosServiceMultiface(std::vector<boost::shared_ptr<PaxosServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PaxosServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PaxosServiceIf> > ifaces_;
  PaxosServiceMultiface() {}
  void add(boost::shared_ptr<PaxosServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void propose(PaxosProposeResult& _return, const PaxosProposeArgs& pArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->propose(_return, pArgs);
    }
    ifaces_[i]->propose(_return, pArgs);
    return;
  }

  void accept(PaxosAcceptResult& _return, const PaxosAcceptArgs& aArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->accept(_return, aArgs);
    }
    ifaces_[i]->accept(_return, aArgs);
    return;
  }

};



#endif
