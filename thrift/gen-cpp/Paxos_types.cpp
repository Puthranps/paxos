/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Paxos_types.h"

#include <algorithm>



int _kPaxosProposeStatusValues[] = {
  PaxosProposeStatus::PROMISE,
  PaxosProposeStatus::PROMISED_HIGHER_VERSION,
  PaxosProposeStatus::HAS_UNFINISHED_TRANSACTION
};
const char* _kPaxosProposeStatusNames[] = {
  "PROMISE",
  "PROMISED_HIGHER_VERSION",
  "HAS_UNFINISHED_TRANSACTION"
};
const std::map<int, const char*> _PaxosProposeStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPaxosProposeStatusValues, _kPaxosProposeStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPaxosAcceptStatusValues[] = {
  PaxosAcceptStatus::ACCEPTED,
  PaxosAcceptStatus::REJECTED
};
const char* _kPaxosAcceptStatusNames[] = {
  "ACCEPTED",
  "REJECTED"
};
const std::map<int, const char*> _PaxosAcceptStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPaxosAcceptStatusValues, _kPaxosAcceptStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* PaxosTransaction::ascii_fingerprint = "727CAEA8265A5DE67DBC931F55CD8753";
const uint8_t PaxosTransaction::binary_fingerprint[16] = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

uint32_t PaxosTransaction::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->proposal);
          this->__isset.proposal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaxosTransaction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PaxosTransaction");

  xfer += oprot->writeFieldBegin("proposal", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->proposal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaxosTransaction &a, PaxosTransaction &b) {
  using ::std::swap;
  swap(a.proposal, b.proposal);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* PaxosProposeArgs::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t PaxosProposeArgs::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t PaxosProposeArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->proposal);
          this->__isset.proposal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaxosProposeArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PaxosProposeArgs");

  xfer += oprot->writeFieldBegin("proposal", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->proposal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaxosProposeArgs &a, PaxosProposeArgs &b) {
  using ::std::swap;
  swap(a.proposal, b.proposal);
  swap(a.__isset, b.__isset);
}

const char* PaxosProposeResult::ascii_fingerprint = "F74CD25D6C6E498255364411DF922AB6";
const uint8_t PaxosProposeResult::binary_fingerprint[16] = {0xF7,0x4C,0xD2,0x5D,0x6C,0x6E,0x49,0x82,0x55,0x36,0x44,0x11,0xDF,0x92,0x2A,0xB6};

uint32_t PaxosProposeResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (PaxosProposeStatus::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->higherProposal);
          this->__isset.higherProposal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pendingTxn.read(iprot);
          this->__isset.pendingTxn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaxosProposeResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PaxosProposeResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.higherProposal) {
    xfer += oprot->writeFieldBegin("higherProposal", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->higherProposal);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pendingTxn) {
    xfer += oprot->writeFieldBegin("pendingTxn", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->pendingTxn.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaxosProposeResult &a, PaxosProposeResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.higherProposal, b.higherProposal);
  swap(a.pendingTxn, b.pendingTxn);
  swap(a.__isset, b.__isset);
}

const char* PaxosAcceptArgs::ascii_fingerprint = "E7AEB48427C123903547CCDEAAD05614";
const uint8_t PaxosAcceptArgs::binary_fingerprint[16] = {0xE7,0xAE,0xB4,0x84,0x27,0xC1,0x23,0x90,0x35,0x47,0xCC,0xDE,0xAA,0xD0,0x56,0x14};

uint32_t PaxosAcceptArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->txn.read(iprot);
          this->__isset.txn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaxosAcceptArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PaxosAcceptArgs");

  xfer += oprot->writeFieldBegin("txn", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->txn.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaxosAcceptArgs &a, PaxosAcceptArgs &b) {
  using ::std::swap;
  swap(a.txn, b.txn);
  swap(a.__isset, b.__isset);
}

const char* PaxosAcceptResult::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t PaxosAcceptResult::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t PaxosAcceptResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->status = (PaxosAcceptStatus::type)ecast1;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaxosAcceptResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PaxosAcceptResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaxosAcceptResult &a, PaxosAcceptResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}


